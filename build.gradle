/*
 * This file is part of MultiLang, licensed under the MIT License.
 *
 * Copyright (c) Lorenzo0111
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "net.kyori.indra.publishing" version "3.1.3"
    id "net.kyori.indra.publishing.sonatype" version "3.1.3"
    id "signing"
    id "io.github.slimjar" version "1.3.0"
}

ext {
    libsBase = 'me.lorenzo0111.multilang.libs'
}

group = "me.lorenzo0111"
version = "1.7.2"
description = "MultiLang is a library that allows you to easily create multi-language placeholders."

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    maven { url "https://jitpack.io" }
    maven { url "https://repo.codemc.org/repository/maven-public" }
    maven { url "https://repo.codemc.org/repository/maven-snapshots/" }
    maven { url "https://repo.codemc.org/repository/maven-releases/" }
    maven { url "https://repo.repsy.io/mvn/lorenzo0111/public" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/"}
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url "https://dl.lorenzo0111.me/releases" }
}

dependencies {
    implementation('org.bstats:bstats-bukkit:3.0.2')
    implementation("me.lorenzo0111.pluginslib:bukkit:2.0.4")
    implementation("io.github.slimjar:slimjar:1.2.8")
    implementation('dev.triumphteam:triumph-gui:3.2.2')
    compileOnly("org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT")
    compileOnly("com.comphenix.protocol:ProtocolLib:5.0.0")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7.1")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("me.lorenzo0111:RocketPlaceholders:2.3.1")
    compileOnly("org.jetbrains:annotations:24.1.0")
    slim("com.squareup.okhttp3:okhttp:4.12.0")
    slim("com.zaxxer:HikariCP:4.0.3")
    slim("com.github.cryptomorin:XSeries:11.0.0")
    slim("com.mysql:mysql-connector-j:8.4.0")
    slim("org.xerial:sqlite-jdbc:3.46.0.0")
    slim("org.slf4j:slf4j-simple:2.0.13")
}

slimJar {
    relocate('com.cryptomorin.xseries',"${libsBase}.xseries")
    relocate('com.zaxxer.hikari',"${libsBase}.hikari")
    relocate('okhttp3', "${libsBase}.okhttp")
}

shadowJar {
    minimize()

    archiveFileName.set("${project.name}-${project.version}.jar")
    relocate("io.github.slimjar","${libsBase}.slimjar")
    relocate("dev.triumphteam","${libsBase}")
    relocate("com.cryptomorin.xseries","${libsBase}.xseries")
    relocate("net.kyori.adventure", "${libsBase}.adventure")
    relocate("net.kyori.option", "${libsBase}.option")
    relocate("net.kyori.examination", "${libsBase}.examination")
    relocate("org.yaml.snakeyaml", "${libsBase}.yaml")
    relocate("org.spongepowered.configurate", "${libsBase}.configurate")
    relocate("org.bstats", "${libsBase}.bstats")
    relocate("com.google.j2objc", "${libsBase}.google.j2objc")
    relocate("com.google.common", "${libsBase}.google.common")
    relocate("com.google.errorprone", "${libsBase}.google.errorprone")
}

javadoc {
    options.links(
            'https://javadoc.io/static/org.jetbrains/annotations/24.1.0/',
            'https://jd.papermc.io/paper/1.20.6'
    )
    source = sourceSets.main.allJava
    include("**/api/*")
    destinationDir = new File("build/javadocs")
}

indra {
    github("Lorenzo0111", "MultiLang")
    mitLicense()
    publishReleasesTo("codeMc", "https://repo.codemc.io/repository/maven-releases/")
    publishSnapshotsTo("codeMc", "https://repo.codemc.io/repository/maven-snapshots/")

    configurePublications {
        pom {
            developers {
                developer {
                    id.set("lorenzo0111")
                }
            }
        }
    }
}

indraSonatype {
    useAlternateSonatypeOSSHost("s01")
}

signing {
    sign configurations.archives
    useGpgCmd()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        filter ReplaceTokens, tokens: [version: version]
    }
}

java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.build.dependsOn tasks.shadowJar
