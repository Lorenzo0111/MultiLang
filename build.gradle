/*
 * This file is part of MultiLang, licensed under the MIT License.
 *
 * Copyright (c) Lorenzo0111
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'maven-publish'
    id 'io.github.slimjar' version '1.2.1'
    id "org.sonarqube" version "3.3"
}

ext {
    libsBase = 'me.lorenzo0111.multilang.libs'
}

apply from: 'https://cdn.rocketplugins.space/spigot'

group = 'me.lorenzo0111'
version = '1.2'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.codemc.org/repository/maven-snapshots/' }
    maven { url 'https://repo.repsy.io/mvn/lorenzo0111/public' }
    maven { url = "https://repo.mattstudios.me/artifactory/public/" }
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

dependencies {
    implementation('me.lorenzo0111:pluginslib:1.4')
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.6.0"
    compileOnly('com.github.MilkBowl:VaultAPI:1.7')
    compileOnly('me.lorenzo0111:RocketPlaceholders:1.9.2')
    implementation("dev.triumphteam:triumph-gui:3.0.3")
    slim('com.github.cryptomorin:XSeries:8.2.0')
    slim('net.kyori:adventure-api:4.8.1')
    slim('net.kyori:adventure-text-serializer-legacy:4.8.1')
    slim('mysql:mysql-connector-java:8.0.25')
    slim('org.xerial:sqlite-jdbc:3.36.0.1')
    slim('com.zaxxer:HikariCP:4.0.3')
}

sonarqube {
    properties {
        property "sonar.projectKey", "Lorenzo0111_MultiLang"
    }
}

slimJar {
    relocate('dev.triumphteam',"${libsBase}")
    relocate('google',"${libsBase}.google")
    relocate('org.slf4j',"${libsBase}.slf4j")
    relocate('org.sqlite.native',"${libsBase}.jdbc.sqlite")
    relocate('com.cryptomorin.xseries',"${libsBase}.xseries")
    relocate('com.zaxxer.hikari',"${libsBase}.hikari")
}

shadowJar {
    minimize()
    archiveFileName = "${project.name}-${project.version}.jar"
    relocate('io.github.slimjar',"${libsBase}.slimjar")

    // destinationDirectory = file("C:\\Users\\loren\\AppData\\Roaming\\VisualSpigot\\minecraft_servers\\VSFC3ti5LC\\plugins")
}


javadoc {
    options.links(
            'https://javadoc.io/static/org.jetbrains/annotations/20.1.0/',
            'https://docs.oracle.com/javase/8/docs/api/',
            'https://papermc.io/javadocs/paper/1.16/'
    )
    source = sourceSets.main.allJava
    include("**/api/*")
    // destinationDir = new File("${System.getenv("javadocs")}/multilang/${version}")
    destinationDir = new File("build/javadocs")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = 'MultiLang'
                description = 'The best free multilocalization plugin'
                url = 'https://github.com/Lorenzo0111/MultiLang'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/Lorenzo0111/MultiLang/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'lorenzo0111'
                        name = 'Lorenzo0111'
                        email = 'lorenzo@rocketplugins.space'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Lorenzo0111/MultiLang.git'
                    developerConnection = 'scm:git:ssh://github.com/Lorenzo0111/MultiLang.git'
                    url = 'https://github.com/Lorenzo0111/MultiLang'
                }
            }

        }
    }

    repositories {
        maven {
            def snapshotUrl = "https://repo.codemc.io/repository/maven-snapshots/"
            def releaseUrl = "https://repo.codemc.io/repository/maven-releases/"

            url = project.version.endsWith("SNAPSHOT") ? snapshotUrl : releaseUrl

            def mavenUsername = System.getenv("CODEMC_USERNAME") ? System.getenv("CODEMC_USERNAME") : null
            def mavenPassword = System.getenv("CODEMC_PASSWORD") ? System.getenv("CODEMC_PASSWORD") : null

            if(mavenUsername != null && mavenPassword != null) {
                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        filter ReplaceTokens, tokens: [version: version]
    }
}

tasks.build.dependsOn tasks.shadowJar
